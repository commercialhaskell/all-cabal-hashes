cabal-version: >= 1.10
name:          LambdaHack
version:       0.2.6
x-revision: 1
license:       BSD3
license-file:  LICENSE
tested-with:   GHC == 7.2.2, GHC == 7.4.1, GHC == 7.6.1
data-files:    LICENSE, CREDITS, PLAYING.md, README.md,
               config.default, config.bot, scores
author:        Andres Loeh, Mikolaj Konarski
maintainer:    Mikolaj Konarski <mikolaj.konarski@funktory.com>
description:   This is an alpha release of LambdaHack,
               a game engine library for roguelike games
               of arbitrary theme, size and complexity,
               packaged together with a small example dungeon crawler.
               When completed, the engine will let you specify content
               to be procedurally generated, define the AI behaviour
               on top of the generic content-independent rules
               and compile a ready-to-play game binary, using either
               the supplied or a custom-made main loop.
               Several frontends are available (GTK is the default)
               and many other generic engine components are easily overridden,
               but the fundamental source of flexibility lies
               in the strict and type-safe separation of code and content.
               .
               New in this release are the Main Menu and the improved
               and configurable mode of squad combat.
               Upcoming new features: playable monsters faction, more than
               two factions inhabiting the dungeon, AIvAI, PvP, improved
               ranged combat AI, dynamic light sources, explosions
               player action undo/redo, completely redesigned UI. Long term
               goals are focused around procedural content generation
               and include in-game content creation, auto-balancing
               and persistent content modification based on player behaviour.
               .
               A larger game that depends on the LambdaHack library
               is Allure of the Stars, available from
               <http://hackage.haskell.org/package/Allure>.
               .
               Note: All modules in the library are kept visible,
               to let games override each, but reuse as many as possible.
               OTOH, to reflect that some modules are implementation details
               relative to others, the source code adheres to the following
               convention. If a module has the same name as a directory,
               the module is the exclusive interface to the directory.
               No references to the modules in the directory are allowed
               except from the interface module.
synopsis:      A roguelike game engine in early and active development
homepage:      http://github.com/kosmikus/LambdaHack
bug-reports:   http://github.com/kosmikus/LambdaHack/issues
category:      Game Engine
build-type:    Simple

source-repository head
  type:            git
  location:        git://github.com/kosmikus/LambdaHack.git

flag curses
  description:     pick the curses frontend
  default:         False

flag vty
  description:     pick the vty frontend
  default:         False

flag std
  description:     pick the stdin/stdout frontend
  default:         False

library
  exposed-modules: Game.LambdaHack.Ability,
                   Game.LambdaHack.Action,
                   Game.LambdaHack.Action.ActionLift
                   Game.LambdaHack.Action.ConfigIO
                   Game.LambdaHack.Action.Frontend,
                   Game.LambdaHack.Action.Frontend.Chosen,
                   Game.LambdaHack.Action.HighScore,
                   Game.LambdaHack.Action.Save,
                   Game.LambdaHack.Actions,
                   Game.LambdaHack.Actor,
                   Game.LambdaHack.ActorState,
                   Game.LambdaHack.Animation,
                   Game.LambdaHack.Area,
                   Game.LambdaHack.AreaRnd,
                   Game.LambdaHack.Binding,
                   Game.LambdaHack.BindingAction,
                   Game.LambdaHack.CDefs,
                   Game.LambdaHack.Cave,
                   Game.LambdaHack.Color,
                   Game.LambdaHack.Command,
                   Game.LambdaHack.CommandAction,
                   Game.LambdaHack.Config,
                   Game.LambdaHack.Content.ActorKind,
                   Game.LambdaHack.Content.CaveKind,
                   Game.LambdaHack.Content.FactionKind,
                   Game.LambdaHack.Content.ItemKind,
                   Game.LambdaHack.Content.PlaceKind,
                   Game.LambdaHack.Content.RuleKind,
                   Game.LambdaHack.Content.StrategyKind,
                   Game.LambdaHack.Content.TileKind,
                   Game.LambdaHack.Draw,
                   Game.LambdaHack.Dungeon,
                   Game.LambdaHack.DungeonState,
                   Game.LambdaHack.Effect,
                   Game.LambdaHack.EffectAction,
                   Game.LambdaHack.Feature,
                   Game.LambdaHack.Flavour,
                   Game.LambdaHack.FOV,
                   Game.LambdaHack.FOV.Common,
                   Game.LambdaHack.FOV.Digital,
                   Game.LambdaHack.FOV.Permissive,
                   Game.LambdaHack.FOV.Shadow,
                   Game.LambdaHack.Grammar,
                   Game.LambdaHack.Item,
                   Game.LambdaHack.ItemAction,
                   Game.LambdaHack.Key,
                   Game.LambdaHack.Kind,
                   Game.LambdaHack.Level,
                   Game.LambdaHack.Misc,
                   Game.LambdaHack.Msg,
                   Game.LambdaHack.Perception,
                   Game.LambdaHack.Place,
                   Game.LambdaHack.Point,
                   Game.LambdaHack.PointXY,
                   Game.LambdaHack.Random,
                   Game.LambdaHack.Running,
                   Game.LambdaHack.State,
                   Game.LambdaHack.Strategy,
                   Game.LambdaHack.StrategyAction,
                   Game.LambdaHack.Tile,
                   Game.LambdaHack.Time,
                   Game.LambdaHack.Turn,
                   Game.LambdaHack.Utils.Assert,
                   Game.LambdaHack.Utils.File,
                   Game.LambdaHack.Utils.Frequency,
                   Game.LambdaHack.Utils.LQueue,
                   Game.LambdaHack.Vector
                   Game.LambdaHack.VectorXY
  other-modules:   Paths_LambdaHack
  build-depends:   ConfigFile >= 1.1.1   && < 2,
                   array      >= 0.3.0.3 && < 1,
                   base       >= 4       && < 5,
                   binary     >= 0.5.0.2 && < 1,
                   bytestring >= 0.9.2   && < 1,
                   containers >= 0.4.1   && < 1,
                   directory  >= 1.1.0.1 && < 2,
                   filepath   >= 1.2.0.1 && < 2,
                   mtl        >= 2.0.1   && < 3,
                   old-time   >= 1.0.0.7 && < 2,
                   random     >= 1.0.1   && < 2,
                   zlib       >= 0.5.3.1 && < 1
  default-language: Haskell2010
  default-extensions: MonoLocalBinds,
                      BangPatterns, RecordWildCards, NamedFieldPuns
  other-extensions: MultiParamTypeClasses, RankNTypes, ScopedTypeVariables,
                    TypeFamilies, CPP
  ghc-options:     -Wall -fwarn-orphans -fwarn-tabs -fwarn-incomplete-uni-patterns -fwarn-incomplete-record-updates -fwarn-monomorphism-restriction -fwarn-unrecognised-pragmas
  ghc-options:     -fno-warn-auto-orphans -fno-warn-implicit-prelude
  ghc-options:     -fno-ignore-asserts -funbox-strict-fields

  if flag(curses) {
    other-modules: Game.LambdaHack.Action.Frontend.Curses
    build-depends: hscurses >= 1.4.1 && < 2
    cpp-options:   -DCURSES
  } else { if flag(vty) {
    other-modules: Game.LambdaHack.Action.Frontend.Vty
    build-depends: vty >= 4.7.0.6
    cpp-options:   -DVTY
  } else { if flag(std) {
    other-modules: Game.LambdaHack.Action.Frontend.Std
    cpp-options:   -DSTD
  } else {
    other-modules: Game.LambdaHack.Action.Frontend.Gtk
    build-depends: gtk >= 0.12.1 && < 0.13
  } } }

executable LambdaHack
  hs-source-dirs:  LambdaHack
  main-is:         Main.hs
  other-modules:   Content.ActorKind,
                   Content.CaveKind,
                   Content.FactionKind,
                   Content.ItemKind,
                   Content.PlaceKind,
                   Content.RuleKind,
                   Content.StrategyKind,
                   Content.TileKind,
                   Multiline,
                   Paths_LambdaHack
  build-depends:   LambdaHack,
                   template-haskell >= 2.6 && < 3,

                   ConfigFile >= 1.1.1   && < 2,
                   array      >= 0.3.0.3 && < 1,
                   base       >= 4       && < 4.19,
                   binary     >= 0.5.0.2 && < 1,
                   bytestring >= 0.9.2   && < 1,
                   containers >= 0.4.1   && < 1,
                   directory  >= 1.1.0.1 && < 2,
                   filepath   >= 1.2.0.1 && < 2,
                   mtl        >= 2.0.1   && < 3,
                   old-time   >= 1.0.0.7 && < 2,
                   random     >= 1.0.1   && < 2,
                   zlib       >= 0.5.3.1 && < 1
  default-language: Haskell2010
  default-extensions: MonoLocalBinds,
                      BangPatterns, RecordWildCards, NamedFieldPuns
  other-extensions: CPP, QuasiQuotes
  ghc-options:     -Wall -fwarn-orphans -fwarn-tabs -fwarn-incomplete-uni-patterns -fwarn-incomplete-record-updates -fwarn-monomorphism-restriction -fwarn-unrecognised-pragmas
  ghc-options:     -fno-warn-auto-orphans -fno-warn-implicit-prelude
  ghc-options:     -fno-ignore-asserts -funbox-strict-fields
  ghc-options:     -threaded -with-rtsopts=-C0.005
-- ghc-options:     -with-rtsopts=-N  -- eats all cores

executable DumbBot
  hs-source-dirs:  DumbBot
  main-is:         Main.hs
  build-depends:   base       >= 4       && < 5,
                   random     >= 1.0.1   && < 2
  default-language: Haskell2010
  default-extensions: MonoLocalBinds,
                      BangPatterns, RecordWildCards, NamedFieldPuns
  ghc-options:     -Wall -fwarn-orphans -fwarn-tabs -fwarn-incomplete-uni-patterns -fwarn-incomplete-record-updates -fwarn-monomorphism-restriction -fwarn-unrecognised-pragmas
  ghc-options:     -fno-warn-auto-orphans -fno-warn-implicit-prelude
  ghc-options:     -fno-ignore-asserts -funbox-strict-fields
