name:          miniutter
-- The package version. See the Haskell package versioning policy (PVP)
-- for standards guiding when and how versions should be incremented.
-- http://www.haskell.org/haskellwiki/Package_versioning_policy
-- PVP summary:+-+------- breaking API changes
--             | | +----- minor or non-breaking API additions
--             | | | +--- code changes with no API change
version:       0.5.0.0
synopsis:      Simple English clause creation from arbitrary words
description:   This library helps in generating simple present tense
               English sentences from short, parametrized descriptions.
               In a typical use, the structure of a clause is fixed,
               but the particular words to be used vary in arbitrary ways.
               The main goal of the library is to minimize the API
               complexity and the code size of programs that use it.
               The library doesn't attempt to ban incorrect English sentences,
               but just make the creation of the simple correct ones easy
               and predictable.
homepage:      https://github.com/Mikolaj/miniutter
bug-reports:   https://github.com/Mikolaj/miniutter/issues
license:       BSD3
license-file:  LICENSE
tested-with:   GHC >= 7.4 && <= 8.6
data-files:    LICENSE, README.md
author:        Mikolaj Konarski
maintainer:    Mikolaj Konarski <mikolaj.konarski@funktory.com>
category:      Natural Language Processing
build-type:    Simple
cabal-version: >= 1.10

source-repository head
  type:               git
  location:           git://github.com/Mikolaj/miniutter.git

library
  exposed-modules:    NLP.Miniutter.English
  build-depends:      base                 >= 4        && < 5,
                      binary               >= 0.6.3.0  && < 1,
                      text                 >= 0.11.2.3 && < 2,
                      containers           >= 0.4.1    && < 1,
                      minimorph            >= 0.2.0.0  && < 1
  if !impl(ghc >= 8.0)
    build-depends: semigroups == 0.18.*

  default-language:   Haskell2010
  if impl(ghc >= 8.0)
  {
  default-extensions: MonoLocalBinds, ScopedTypeVariables, OverloadedStrings
                      BangPatterns, RecordWildCards, NamedFieldPuns, MultiWayIf,
                      LambdaCase, DefaultSignatures, InstanceSigs,
                      MonadFailDesugaring, StrictData, CPP
  ghc-options:        -Wall -Wcompat -Worphans -Wincomplete-uni-patterns -Wincomplete-record-updates -Wmissing-home-modules -Widentities -Wredundant-constraints
  ghc-options:        -Wall-missed-specialisations
  ghc-options:        -fno-ignore-asserts -fexpose-all-unfoldings -fspecialise-aggressively
  } else {
  default-extensions: CPP, OverloadedStrings, NamedFieldPuns
  }

test-suite test-miniutter
  type:               exitcode-stdio-1.0
  main-is:            test-miniutter.hs
  hs-source-dirs:     test
  build-depends:      miniutter,
                      base                 >= 4        && < 5,
                      text                 >= 0.11.2.3 && < 2,
                      containers           >= 0.4.1    && < 1,
                      test-framework       >= 0.6      && < 1,
                      test-framework-hunit >= 0.2      && < 1,
                      HUnit                >= 1.2      && < 2
  if !impl(ghc >= 8.0)
    build-depends: semigroups == 0.18.*

  default-language:   Haskell2010
  if impl(ghc >= 8.0)
  {
  default-extensions: MonoLocalBinds, ScopedTypeVariables, OverloadedStrings
                      BangPatterns, RecordWildCards, NamedFieldPuns, MultiWayIf,
                      LambdaCase, DefaultSignatures, InstanceSigs,
                      MonadFailDesugaring, StrictData, CPP
  ghc-options:        -Wall -Wcompat -Worphans -Wincomplete-uni-patterns -Wincomplete-record-updates -Wmissing-home-modules -Widentities -Wredundant-constraints
  ghc-options:        -Wall-missed-specialisations
  ghc-options:        -fno-ignore-asserts -fexpose-all-unfoldings -fspecialise-aggressively
  } else {
  default-extensions: CPP, OverloadedStrings, NamedFieldPuns
  }
