name:                minimorph
-- The package version. See the Haskell package versioning policy (PVP)
-- for standards guiding when and how versions should be incremented.
-- http://www.haskell.org/haskellwiki/Package_versioning_policy
-- PVP summary:      +-+------- breaking API changes
--                   | | +----- minor or non-breaking API additions
--                   | | | +--- code changes with no API change
version:             0.3.0.1
synopsis:            English spelling functions with an emphasis on simplicity.
description:         A set of simplistic functions capturing the more regular
                     parts of English spelling (for generation, not parsing).
                     You will need to complement this with some account for
                     irregular nouns/verbs. This package is not meant to provide
                     anything resembling a full account of English morphology
                     (something like Functional Morphology or sequor could be
                     better suited). The main goal is to provide something cheap
                     and cheerful with no learning curve, that you can use until
                     your application calls for more robustness.
                     See <https://github.com/Mikolaj/miniutter> for a simple
                     use case.
homepage:            https://github.com/Mikolaj/minimorph
bug-reports:         https://github.com/Mikolaj/minimorph/issues
license:             BSD3
license-file:        LICENSE
tested-with:   GHC ==7.10.3 || ==8.0.2 || ==8.2.2 || ==8.4.4 || ==8.6.5 || ==8.8.4 || ==8.10.7 || ==9.0.2 || ==9.2.3 || ==9.4
author:              Eric Kow
maintainer:          Mikolaj Konarski <mikolaj.konarski@funktory.com>
category:            Natural Language Processing
build-type:          Simple
cabal-version:       >=1.10

source-repository head
  type:               git
  location:           git://github.com/Mikolaj/minimorph.git

library
  exposed-modules:     NLP.Minimorph.English
                       NLP.Minimorph.Number
                       NLP.Minimorph.Util

  build-depends:       base < 99
               ,       text >= 1.1.1
  if !impl(ghc >= 8.0)
    build-depends: semigroups == 0.18.*

  default-language:   Haskell2010
  if impl(ghc >= 8.0)
  {
  default-extensions: MonoLocalBinds, ScopedTypeVariables, OverloadedStrings
                      BangPatterns, RecordWildCards, NamedFieldPuns, MultiWayIf,
                      LambdaCase, DefaultSignatures, InstanceSigs,
                      PatternSynonyms, StrictData, CPP
  other-extensions:   ViewPatterns
  ghc-options:        -Wall -Wcompat -Worphans -Wincomplete-uni-patterns -Wincomplete-record-updates -Wmissing-home-modules -Widentities -Wredundant-constraints -Wpartial-fields
  ghc-options:        -Wall-missed-specialisations
  ghc-options:        -fno-ignore-asserts -fexpose-all-unfoldings -fspecialise-aggressively -fsimpl-tick-factor=200
  } else {
  default-extensions: CPP, OverloadedStrings
  }

test-suite test-minimorph
  type:       exitcode-stdio-1.0
  main-is:    test-minimorph.hs
  other-modules: NLP.Minimorph.EnglishTest
  hs-Source-Dirs: test
  build-depends:       base < 99
               ,       HUnit
               ,       minimorph
               ,       test-framework
               ,       test-framework-hunit
               ,       text
  if !impl(ghc >= 8.0)
    build-depends: semigroups == 0.18.*

  default-language:   Haskell2010
  if impl(ghc >= 8.0)
  {
  default-extensions: MonoLocalBinds, ScopedTypeVariables, OverloadedStrings
                      BangPatterns, RecordWildCards, NamedFieldPuns, MultiWayIf,
                      LambdaCase, DefaultSignatures, InstanceSigs,
                      PatternSynonyms, StrictData, CPP
  ghc-options:        -Wall -Wcompat -Worphans -Wincomplete-uni-patterns -Wincomplete-record-updates -Wmissing-home-modules -Widentities -Wredundant-constraints -Wpartial-fields
  ghc-options:        -Wall-missed-specialisations
  ghc-options:        -fno-ignore-asserts -fexpose-all-unfoldings -fspecialise-aggressively -fsimpl-tick-factor=200
  ghc-options:        -threaded -rtsopts
  } else {
  default-extensions: CPP, OverloadedStrings
  }
