name:                cborg
version:             0.1.1.0
x-revision: 2
synopsis:            Concise Binary Object Representation
license:             BSD3
license-file:        LICENSE.txt
author:              Duncan Coutts
maintainer:          duncan@community.haskell.org, ben@smart-cactus.org
bug-reports:         https://github.com/well-typed/cborg/issues
copyright:           2015-2017 Duncan Coutts,
                     2015-2017 Well-Typed LLP,
                     2015 IRIS Connect Ltd
category:            Codec
build-type:          Simple
cabal-version:       >= 1.10
tested-with:         GHC == 7.8.4, GHC == 7.10.3, GHC == 8.0.1

description:
  This package (formerly @binary-serialise-cbor@) provides an efficient
  implementation of the Concise Binary Object Representation (CBOR), as
  specified by RFC 7049.
  .
  If you are looking for a library for serialisation of Haskell values,
  have a look at the @serialise@ package, which is built upon this library.

extra-source-files:
  src/cbits/cbor.h

source-repository head
  type: git
  location: https://github.com/well-typed/cborg.git

--------------------------------------------------------------------------------
-- Flags

flag optimize-gmp
  default: True
  manual: False
  description: Use optimized code paths for integer-gmp

--------------------------------------------------------------------------------
-- Library

library
  default-language:  Haskell2010
  ghc-options:       -Wall
  include-dirs:      src/cbits
  hs-source-dirs:    src

  exposed-modules:
    Codec.CBOR
    Codec.CBOR.Decoding
    Codec.CBOR.Encoding
    Codec.CBOR.FlatTerm
    Codec.CBOR.Magic
    Codec.CBOR.Pretty
    Codec.CBOR.Read
    Codec.CBOR.Write
    Codec.CBOR.Term

  other-extensions:
    CPP, ForeignFunctionInterface, MagicHash,
    UnboxedTuples, BangPatterns, DeriveDataTypeable,
    RankNTypes

  build-depends:
    array                   >= 0.4     && < 0.6,
    base                    >= 4.7     && < 4.13,
    bytestring              >= 0.10.4  && < 0.11,
    containers              >= 0.5     && < 0.6,
    ghc-prim                >= 0.3     && < 0.6,
    half                    >= 0.2.2.3 && < 0.3,
    primitive               >= 0.5     && < 0.7,
    text                    >= 1.1     && < 1.3

  if flag(optimize-gmp)
    cpp-options:            -DFLAG_OPTIMIZE_GMP
    build-depends:
      integer-gmp

  if impl(ghc >= 8.0)
    ghc-options: -Wcompat -Wnoncanonical-monad-instances -Wnoncanonical-monadfail-instances
  else
    -- provide/emulate `Control.Monad.Fail` and `Data.Semigroups` API for pre-GHC8
    build-depends: fail == 4.9.*, semigroups == 0.18.*
