
Name:                fixplate
Version:             0.1.8
Synopsis:            Uniplate-style generic traversals for optionally annotated fixed-point types.
Description:         Uniplate-style generic traversals for fixed-point types, which can be  
                     optionally annotated with attributes. We also provide recursion schemes,
                     a generic zipper, generic pretty-printer, generic tries, generic hashing,
                     and generic tree visualization. See the module "Data.Generics.Fixplate" and 
                     then the individual modules for more detailed information.
License:             BSD3
License-file:        LICENSE
Author:              Balazs Komuves
Copyright:           (c) 2011-2019 Balazs Komuves
Maintainer:          bkomuves (plus) hackage (at) gmail (dot) com
Homepage:            http://code.haskell.org/~bkomuves/
Stability:           Experimental
Category:            Generics
Tested-With:         GHC == 8.6.5, GHC == 8.8.1
Cabal-Version:       1.24
Build-Type:          Simple

----------------------------------------

source-repository head
  type:     darcs
  location: https://hub.darcs.net/bkomuves/fixplate
  
-- Flag withUtils
--   Description: Include utility modules
--   default: True

----------------------------------------

Library

  Build-Depends:       base >= 4 && < 5, containers

--  if flag(withUtils)
--    cpp-options:         -DWITH_UTILITY_MODULES

  Exposed-Modules:     Data.Generics.Fixplate
                       Data.Generics.Fixplate.Base
                       Data.Generics.Fixplate.Functor
                       Data.Generics.Fixplate.Open
                       Data.Generics.Fixplate.Traversals
                       Data.Generics.Fixplate.Morphisms
                       Data.Generics.Fixplate.Attributes
                       Data.Generics.Fixplate.Zipper
                       Data.Generics.Fixplate.Draw
                       Data.Generics.Fixplate.Pretty
                       Data.Generics.Fixplate.Trie
                       Data.Generics.Fixplate.Hash

--  if flag(withUtils)
--    Exposed-Modules:     
--                         Data.Generics.Fixplate.Util.Hash.Class
--                         Data.Generics.Fixplate.Util.Hash.Table
--                         Data.Generics.Fixplate.Util.Hash.FNV.FNV32
--                         Data.Generics.Fixplate.Util.Hash.FNV.FNV64

  Other-Modules:       Data.Generics.Fixplate.Misc
 
  default-extensions:  CPP
  other-extensions:    TypeOperators

  if impl(ghc)
    default-extensions:  BangPatterns

  Hs-Source-Dirs:      .

  Default-Language:    Haskell2010

  ghc-options:         -Wall -fno-warn-unused-matches -fno-warn-name-shadowing

----------------------------------------

test-suite fixplate-tests
                      
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tests
  main-is:             test-suite.hs
  
  other-modules:       TestSuite.Attributes
                       TestSuite.Instances
                       TestSuite.Morphisms
                       TestSuite.Traversals
                       TestSuite.Trie
                       TestSuite.Zipper
                       TestSuite.Tools
                       TestSuite.Misc

  build-depends:       base >= 4 && < 5, containers, 
                       QuickCheck >= 2, tasty, tasty-quickcheck,
                       fixplate >= 0.1.8

  Default-Language:    Haskell2010
  Default-Extensions:  CPP, BangPatterns, TypeSynonymInstances

   