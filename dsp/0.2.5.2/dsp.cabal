Cabal-Version:    2.2
Name:             dsp
Version:          0.2.5.2
License:          GPL-2.0-only
License-File:     COPYING
Copyright:        Matt Donadio, 2003
Author:           Matt Donadio <m.p.donadio@ieee.org>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Stability:        Experimental
Homepage:         http://www.haskell.org/haskellwiki/DSP
-- Homepage:         http://haskelldsp.sourceforge.net/
Synopsis:         Haskell Digital Signal Processing
Description:      Digital Signal Processing, Fourier Transform, Linear Algebra, Interpolation
Category:         Sound, Math
Tested-With:      GHC==7.4.2, GHC==7.6.3, GHC==7.8.4
Tested-With:      GHC==8.0.2, GHC==8.2.1
Build-Type:       Simple

Source-Repository this
  Tag:         0.2.5.2
  Type:        darcs
  Location:    http://code.haskell.org/~thielema/dsp/

Source-Repository head
  Type:        darcs
  Location:    http://code.haskell.org/~thielema/dsp/

Flag buildExamples
  Description: Build demo executables
  Default: False

Library
  Build-Depends:
    containers >=0.3 && <0.7,
    array >=0.1 && <0.6,
    random >=1.0 && <1.3,
    base >= 2 && <5

  GHC-Options:      -Wall
  Default-Language: Haskell98
  Exposed-modules:
    DSP.Basic
    DSP.Convolution
    DSP.Correlation
    DSP.Covariance
    DSP.Estimation.Frequency.FCI
    DSP.Estimation.Frequency.PerMax
    DSP.Estimation.Frequency.Pisarenko
    DSP.Estimation.Frequency.QuinnFernandes
    DSP.Estimation.Frequency.WLP
    DSP.Estimation.Spectral.AR
    DSP.Estimation.Spectral.ARMA
    DSP.Estimation.Spectral.KayData
    DSP.Estimation.Spectral.MA
    DSP.FastConvolution
    DSP.Filter.Analog.Prototype
    DSP.Filter.Analog.Response
    DSP.Filter.Analog.Transform
    DSP.Filter.FIR.FIR
    DSP.Filter.FIR.Kaiser
    DSP.Filter.FIR.PolyInterp
    DSP.Filter.FIR.Sharpen
    DSP.Filter.FIR.Smooth
    DSP.Filter.FIR.Taps
    DSP.Filter.FIR.Window
    DSP.Filter.IIR.Bilinear
    DSP.Filter.IIR.Design
    DSP.Filter.IIR.IIR
    DSP.Filter.IIR.Matchedz
    DSP.Filter.IIR.Prony
    DSP.Filter.IIR.Transform
    DSP.Filter.IIR.Cookbook
    DSP.Flowgraph
    DSP.Multirate.CIC
    DSP.Multirate.Halfband
    DSP.Multirate.Polyphase
    DSP.Source.Basic
    DSP.Source.Oscillator
    DSP.Unwrap
    DSP.Window
    Matrix.Cholesky
    Matrix.LU
    Matrix.QR.Householder
    Matrix.QR.Givens
    Matrix.Levinson
    Matrix.Matrix
    Matrix.Vector
    Matrix.Sparse
    Matrix.Simplex
    Numeric.Approximation.Chebyshev
    Numeric.Random.Distribution.Binomial
    Numeric.Random.Distribution.Exponential
    Numeric.Random.Distribution.Gamma
    Numeric.Random.Distribution.Geometric
    Numeric.Random.Distribution.Normal
    Numeric.Random.Distribution.Poisson
    Numeric.Random.Distribution.Uniform
    Numeric.Random.Generator.MT19937
    Numeric.Random.Spectrum.Brown
    Numeric.Random.Spectrum.Pink
    Numeric.Random.Spectrum.Purple
    Numeric.Random.Spectrum.White
    Numeric.Special.Trigonometric
    Numeric.Statistics.Covariance
    Numeric.Statistics.Median
    Numeric.Statistics.Moment
    Numeric.Statistics.TTest
    Numeric.Transform.Fourier.CT
    Numeric.Transform.Fourier.DFT
    Numeric.Transform.Fourier.FFT
    Numeric.Transform.Fourier.FFTHard
    Numeric.Transform.Fourier.FFTUtils
    Numeric.Transform.Fourier.Goertzel
    Numeric.Transform.Fourier.PFA
    Numeric.Transform.Fourier.R2DIF
    Numeric.Transform.Fourier.R2DIT
    Numeric.Transform.Fourier.R4DIF
    Numeric.Transform.Fourier.Rader
    Numeric.Transform.Fourier.SRDIF
    Numeric.Transform.Fourier.SlidingFFT
    Polynomial.Basic
    Polynomial.Chebyshev
    Polynomial.Maclaurin
    Polynomial.Roots
  Other-Modules:
    Numeric.Transform.Fourier.Eigensystem

Test-Suite dsp-test
  Type: exitcode-stdio-1.0
  Main-Is: Main.hs
  Other-Modules: Test.Matrix.QR
  Hs-Source-Dirs: test
  GHC-Options: -Wall
  Default-Language: Haskell98
  Build-Depends:
    QuickCheck >=2.5 && <3,
    dsp,
    containers,
    array,
    base

Executable dsp-demo-article
  Main-Is: Article.hs
  Hs-Source-Dirs: demo
  GHC-Options: -Wall
  Default-Language: Haskell98
  If flag(buildExamples)
    Build-Depends:
      dsp,
      array,
      base
  Else
    Buildable: False

Executable dsp-demo-fft-bench
  Main-Is: FFTBench.hs
  Hs-Source-Dirs: demo
  GHC-Options: -Wall
  Default-Language: Haskell98
  If flag(buildExamples)
    Build-Depends:
      dsp,
      array,
      base
  Else
    Buildable: False

Executable dsp-demo-fft-test
  Main-Is: FFTTest.hs
  Hs-Source-Dirs: demo
  GHC-Options: -Wall
  Default-Language: Haskell98
  If flag(buildExamples)
    Build-Depends:
      dsp,
      array,
      base
  Else
    Buildable: False

Executable dsp-demo-freq
  Main-Is: FreqDemo.hs
  Hs-Source-Dirs: demo
  GHC-Options: -Wall
  Default-Language: Haskell98
  If flag(buildExamples)
    Build-Depends:
      dsp,
      array,
      base
  Else
    Buildable: False

Executable dsp-demo-iir
  Main-Is: IIRDemo.hs
  Hs-Source-Dirs: demo
  GHC-Options: -Wall
  Default-Language: Haskell98
  If flag(buildExamples)
    Build-Depends:
      dsp,
      array,
      base
  Else
    Buildable: False

Executable dsp-demo-noise
  Main-Is: NoiseDemo.hs
  Hs-Source-Dirs: demo
  GHC-Options: -Wall
  Default-Language: Haskell98
  If flag(buildExamples)
    Build-Depends:
      dsp,
      array,
      base
  Else
    Buildable: False
