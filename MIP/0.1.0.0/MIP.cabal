cabal-version: 1.18

-- This file has been generated from package.yaml by hpack version 0.33.0.
--
-- see: https://github.com/sol/hpack
--
-- hash: ac803e98baaa0544b947d71e759475b741c54bd5c39105056cfd3d1fbc25b4e0

name:           MIP
version:        0.1.0.0
x-revision: 2
synopsis:       Library for using Mixed Integer Programming (MIP)
description:    Please see the README on GitHub at <https://github.com/msakai/haskell-MIP/tree/master/MIP#readme>
category:       Math, Algorithms, Optimisation, Optimization
homepage:       https://github.com/msakai/haskell-MIP#readme
bug-reports:    https://github.com/msakai/haskell-MIP/issues
author:         Masahiro Sakai
maintainer:     masahiro.sakai@gmail.com
copyright:      2020 Masahiro Sakai
license:        BSD3
license-file:   LICENSE
build-type:     Simple
extra-source-files:
    README.md
    ChangeLog.md
    doc-images/MIP-Status-diagram.tex
extra-doc-files:
    doc-images/MIP-Status-diagram.png

source-repository head
  type: git
  location: https://github.com/msakai/haskell-MIP

flag TestCBC
  description: run test cases that depends on cbc command
  manual: True
  default: False

flag TestCPLEX
  description: run test cases that depends on cplex command
  manual: True
  default: False

flag TestGlpsol
  description: run test cases that depends on glpsol command
  manual: True
  default: False

flag TestGurobiCl
  description: run test cases that depends on gurobi_cl command
  manual: True
  default: False

flag TestLPSolve
  description: run test cases that depends on lp_solve command
  manual: True
  default: False

flag TestSCIP
  description: run test cases that depends on scip command
  manual: True
  default: False

flag WithZlib
  description: Use zlib package to support gzipped files
  manual: True
  default: True

library
  exposed-modules:
      Numeric.Optimization.MIP
      Numeric.Optimization.MIP.Base
      Numeric.Optimization.MIP.FileUtils
      Numeric.Optimization.MIP.LPFile
      Numeric.Optimization.MIP.MPSFile
      Numeric.Optimization.MIP.Solution.CBC
      Numeric.Optimization.MIP.Solution.CPLEX
      Numeric.Optimization.MIP.Solution.GLPK
      Numeric.Optimization.MIP.Solution.Gurobi
      Numeric.Optimization.MIP.Solution.SCIP
      Numeric.Optimization.MIP.Solver
      Numeric.Optimization.MIP.Solver.Base
      Numeric.Optimization.MIP.Solver.CBC
      Numeric.Optimization.MIP.Solver.CPLEX
      Numeric.Optimization.MIP.Solver.Glpsol
      Numeric.Optimization.MIP.Solver.GurobiCl
      Numeric.Optimization.MIP.Solver.LPSolve
      Numeric.Optimization.MIP.Solver.SCIP
  other-modules:
      Paths_MIP
      Numeric.Optimization.MIP.Internal.ProcessUtil
      Numeric.Optimization.MIP.Internal.Util
  hs-source-dirs:
      src
  other-extensions: CPP
  build-depends:
      OptDir
    , base >=4.7 && <5
    , containers >=0.5.0
    , data-default-class
    , extended-reals >=0.1 && <1.0
    , filepath
    , intern >=0.9.1.2 && <1.0.0.0
    , lattices
    , megaparsec >=5 && <10
    , mtl >=2.1.2 && <2.3
    , process >=1.1.0.2
    , scientific
    , stm >=2.3
    , temporary >=1.2
    , text >=1.1.0.0
    , xml-conduit
  if flag(WithZlib)
    cpp-options: -DWITH_ZLIB
    build-depends:
        bytestring
      , bytestring-encoding
      , case-insensitive
      , zlib
  else
    cpp-options:  
  default-language: Haskell2010

test-suite MIP-test
  type: exitcode-stdio-1.0
  main-is: TestSuite.hs
  other-modules:
      Test.LPFile
      Test.MIP
      Test.MIPSolver
      Test.MPSFile
      Paths_MIP
  hs-source-dirs:
      test
  build-depends:
      MIP
    , base >=4.7 && <5
    , containers >=0.5.0
    , data-default-class
    , lattices
    , tasty >=0.10.1
    , tasty-hunit >=0.9 && <0.11
    , tasty-quickcheck >=0.8 && <0.11
    , tasty-th
  if flag(TestCBC)
    cpp-options: -DTEST_CBC
  else
    cpp-options:  
  if flag(TestCPLEX)
    cpp-options: -DTEST_CPLEX
  else
    cpp-options:  
  if flag(TestGlpsol)
    cpp-options: -DTEST_GLPSOL
  else
    cpp-options:  
  if flag(TestGurobiCl)
    cpp-options: -DTEST_GUROBI_CL
  else
    cpp-options:  
  if flag(TestLPSolve)
    cpp-options: -DTEST_LP_SOLVE
  else
    cpp-options:  
  if flag(TestSCIP)
    cpp-options: -DTEST_SCIP
  else
    cpp-options:  
  default-language: Haskell2010
