cabal-version: 1.12

-- This file has been generated from package.yaml by hpack version 0.31.1.
--
-- see: https://github.com/sol/hpack
--
-- hash: 35f00554bbe2688e0d96c8f4b16684869fa31a90d07ea9d1ad0092184902c6d2

name:           impossible
version:        1.1.4
synopsis:       Set of data and type definitions of impossible types. Impossible types are useful when declaring type classes / type families instances that should not be expanded by GHC until a specific type is provided in order to keep the types nice and readable.
category:       Data
stability:      experimental
homepage:       https://github.com/luna/impossible
bug-reports:    https://github.com/luna/impossible/issues
author:         Luna Team
maintainer:     Wojciech Danilo <wojciech.danilo@luna-lang.org>
copyright:      Copyright (C) 2018 Luna Team
license:        Apache-2.0
license-file:   LICENSE
build-type:     Simple

library
  exposed-modules:
      Data.Impossible
  other-modules:
      Paths_impossible
  hs-source-dirs:
      src
  default-extensions: AllowAmbiguousTypes ApplicativeDo BangPatterns BinaryLiterals ConstraintKinds DataKinds DefaultSignatures DeriveDataTypeable DeriveFoldable DeriveFunctor DeriveGeneric DeriveTraversable DoAndIfThenElse DuplicateRecordFields EmptyDataDecls FlexibleContexts FlexibleInstances FunctionalDependencies GeneralizedNewtypeDeriving InstanceSigs LambdaCase MonadComprehensions MultiWayIf NamedWildCards NegativeLiterals NoImplicitPrelude NumDecimals OverloadedLabels PackageImports QuasiQuotes PatternSynonyms RankNTypes RecursiveDo ScopedTypeVariables StandaloneDeriving TemplateHaskell TupleSections TypeApplications TypeFamilies TypeFamilyDependencies TypeOperators UnicodeSyntax ViewPatterns LiberalTypeSynonyms RelaxedPolyRec
  ghc-options: -Wall -O2
  build-depends:
      base >=4.9 && <4.13
    , lens
  default-language: Haskell2010
