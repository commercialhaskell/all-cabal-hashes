name:            binary
version:         0.6.0.0
x-revision: 2
license:         BSD3
license-file:    LICENSE
author:          Lennart Kolmodin <kolmodin@gmail.com>
maintainer:      Lennart Kolmodin, Don Stewart <dons@galois.com>
homepage:        https://github.com/kolmodin/binary
description:     Efficient, pure binary serialisation using lazy ByteStrings.
                 Haskell values may be encoded to and from binary formats, 
                 written to disk as binary, or sent over the network.
                 Serialisation speeds of over 1 G\/sec have been observed,
                 so this library should be suitable for high performance
                 scenarios.
synopsis:        Binary serialisation for Haskell values using lazy ByteStrings
category:        Data, Parsing
stability:       provisional
build-type:      Simple
cabal-version:   >= 1.6
tested-with:     GHC == 7.0.4, GHC == 7.4.1, GHC == 7.6.1
extra-source-files: README index.html

source-repository head
  type: git
  location: git://github.com/kolmodin/binary.git

flag bytestring-in-base
flag split-base
flag applicative-in-base

library
  if flag(bytestring-in-base)
    -- bytestring was in base-2.0 and 2.1.1
    build-depends: base >= 2.0 && < 2.2
    cpp-options: -DBYTESTRING_IN_BASE
  else
    -- in base 1.0 and 3.0 bytestring is a separate package
    build-depends: base < 2.0 || >= 3, bytestring >= 0.9 && <0.11

  if flag(split-base)
    build-depends:   base >= 3.0 && < 4.8, containers, array
  else
    build-depends:   base < 3.0

  if flag(applicative-in-base)
    build-depends: base >= 2.0
    cpp-options: -DAPPLICATIVE_IN_BASE
  else
    build-depends: base < 2.0
  hs-source-dirs:  src

  exposed-modules: Data.Binary,
                   Data.Binary.Put,
                   Data.Binary.Get,
                   Data.Binary.Get.Internal,
                   Data.Binary.Builder,
                   Data.Binary.Builder.Internal

  other-modules:   Data.Binary.Builder.Base

  extensions:      CPP,
                   FlexibleContexts

  ghc-options:     -O2 -Wall -fliberate-case-threshold=1000

--  if impl(ghc < 6.5)
--    ghc-options:   -fallow-undecidable-instances
