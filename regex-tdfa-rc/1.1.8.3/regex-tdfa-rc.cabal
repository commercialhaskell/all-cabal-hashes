Name:                   regex-tdfa-rc
Version:                1.1.8.3
x-revision: 2
-- 0.99.4 tests pnonempty' = \ p -> POr [ PEmpty, p ] instead of PNonEmpty
-- 0.99.5 remove PNonEmpty constructor
-- 0.99.6 change to nested nonEmpty calls for PBound
-- 0.99.7 Use (PGroup Nothing) in Pattern to decompose PBound
-- 0.99.8 testing chaning Maximize to Minimize for Tags, decide (a*)* is canonical problem
-- 0.99.9 testing changing bestTrans/chooseWith/choose to include enterOrbit/newFlags/(_,True) info
-- 0.99.10 fixed ((.?)*)* patterns by changing PStar nullView when mayFirstBeNull
-- 0.99.11 improve above fix and make stuff work better -- HAS BUG, along with old TDFA!
-- 0.99.12 try to debug 0.99.11 : fixed updateWinner
-- 0.99.13 more cleanup
-- 0.99.14 start changing to the new real DFA
-- 0.99.15 get string with NewDFA testing, unit tests and 1000 random regex pass
-- 0.99.16 performance? up to v15
-- 0.99.17 radical removal of flag array and adding of SetVal to handle groups
-- 0.99.18 try alternate lazy/strict strategy in NewDFA.  Fix offset laziness.
-- 0.99.19 try for pre-comparison of orbit-logs!
-- 0.99.20 go to many vs single?
-- 1.0.0
-- 1.0.1 add NewDFATest.hs
-- 1.0.2 arg, the prof is fast and the normal slow!
-- 1.0.3 try to alter matchTest to not have the Bool args? No
--  np2  comment out all Testing code? No
--  np3  !off the multi? No
--  np4  comment out all Single0 and Single code? No
--  np5  comment out all Multi0 code? No
--  np6  comment out ans check? No
--  np7  just return True? Fast
--  np8  np6 and NOINLINE endOff? No
--  np9  INLINE endOf? No
--  np10 Peel off CharMap/IntMap and DFA/DT with pattern matching? No
--  np11 break multi to not look at o and just return True? Yes !!!!
--  np12 expand o in the case where t lookup get Nothing? Yes--this is the fix!?
--  np13 try to improve readability with the "mm" combinator? Yes!
-- 1.0.4 try repaired NewDFATest_SBS
-- 1.0.5 use "uncons" on SBS
-- 1.0.6 try NewDFATest_SBS with uncons
-- 1.0.7 make NewDFA directory and String_NC
-- 1.1.0 NewDFA code working
-- 1.1.1 add gnu escapes
-- 1.1.2 worked
-- 1.1.3 BROKEN after 100 characters the compressOrbit dies!
-- 1.1.4 fixed 
-- 1.1.5 try needUniqTags in POr in CorePattern.hs, try (toAdvice b) for PStar child
-- 1.1.6 Fix bug preventing []] [-] [^]] [^-] (thanks to Maxime Henrion)
-- 1.1.7 fix url below
-- 1.1.8 Make ghc-7.0.2 on platorm 2011.2.0.0.0 happy
-- 1.1.8.1 Fix for ghc 7.8
-- 1.1.8.2 Remove Show instances
-- 1.1.8.3 Fix for ghc 7.4; remove -O2
License:                BSD3
License-File:           LICENSE
Copyright:              Copyright (c) 2007, Christopher Kuklewicz
Author:                 Christopher Kuklewicz
Maintainer:             Roman Cheplyaka
Stability:              Seems to work, but not POSIX yet
Homepage:               http://hackage.haskell.org/package/regex-tdfa
Package-URL:            http://code.haskell.org/regex-tdfa/
Synopsis:               Replaces/Enhances Text.Regex
Description:            A new all Haskell "tagged" DFA regex engine, inspired by libtre (fork by Roman Cheplyaka)
Category:               Text
Tested-With:            GHC
Build-Type:             Simple
Cabal-Version:          >= 1.2.3

flag base4

library 
  Build-Depends:        regex-base >= 0.93.1 && < 0.94, parsec, mtl, containers, array >= 0.4, bytestring
  if flag(base4)
    Build-Depends:      base >= 4.0 && < 4.11, ghc-prim
  else
    Build-Depends:      base < 4.0

  other-modules:          Paths_regex_tdfa_rc
  Exposed-Modules:        Data.IntMap.CharMap2
                          Data.IntMap.EnumMap2
                          Data.IntSet.EnumSet2
                          Text.Regex.TDFA
                          Text.Regex.TDFA.ByteString
                          Text.Regex.TDFA.ByteString.Lazy
                          Text.Regex.TDFA.Common
                          Text.Regex.TDFA.CorePattern
                          Text.Regex.TDFA.IntArrTrieSet
                          Text.Regex.TDFA.NewDFA.Engine
                          Text.Regex.TDFA.NewDFA.Engine_FA
                          Text.Regex.TDFA.NewDFA.Engine_NC
                          Text.Regex.TDFA.NewDFA.Engine_NC_FA
                          Text.Regex.TDFA.NewDFA.Tester
                          Text.Regex.TDFA.NewDFA.Uncons
                          Text.Regex.TDFA.NewDFA.MakeTest
                          Text.Regex.TDFA.Pattern
                          Text.Regex.TDFA.ReadRegex
                          Text.Regex.TDFA.Sequence
                          Text.Regex.TDFA.String
                          Text.Regex.TDFA.TDFA
                          Text.Regex.TDFA.TNFA
  Buildable:              True
  Extensions:             MultiParamTypeClasses, FunctionalDependencies, BangPatterns, MagicHash, RecursiveDo, NoMonoPatBinds, ForeignFunctionInterface, UnboxedTuples, TypeOperators, FlexibleContexts, ExistentialQuantification, UnliftedFFITypes, TypeSynonymInstances, FlexibleInstances
  GHC-Options:            -Wall -funbox-strict-fields -fspec-constr-count=10 -fno-warn-orphans
  GHC-Prof-Options:       -auto-all
