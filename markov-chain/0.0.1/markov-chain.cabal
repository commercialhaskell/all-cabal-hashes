Name:             markov-chain
Version:          0.0.1
x-revision: 1
License:          GPL
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://darcs.haskell.org/markov-chain/
Category:         Algorithms
Build-Depends:    base>=1.0 && <3, mtl
-- From the Monad Template Library we only need the State monad.
-- If your compiler does not support functional dependencies,
-- it would be easy to replace that by mapAccumL
-- or by the MTL-split package which is on the way.
Synopsis:         Markov Chains for generating random sequences with a user definable behaviour.
Description:
   This library can be used to generate random sequences of anything
   with a behaviour that is adapted to some training data.
   Input a marketing text or a speech and
   recompose it to another arbitrary text of this sort.
   Input a dictionary of person names and create new names.
   Input a sequence of notes and get out a new melody.
   Input a set of Haskell modules and generate ...
   nice idea but the result will certainly have neither correct syntax nor types.
   I think, it's a good thing about Haskell, that you cannot fool it so easily.
   The idea is very simple:
   The algorithm analyses your input\/training data
   with respect to how likely an @a@ or @e@ follows the letters @r@ and @e@.
   Then on recomposition it chooses subsequent letters randomly
   according to the frequencies found in the training data.
   This library is well suited for /bull-shit generators/.
GHC-Options:      -Wall -O
Tested-With:      GHC==6.4.1
Hs-Source-Dirs:   src
Exposed-Modules:
  Data.MarkovChain
