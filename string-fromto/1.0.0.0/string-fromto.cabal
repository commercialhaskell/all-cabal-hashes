cabal-version: 1.12

name:           string-fromto
version:        1.0.0.0
x-revision: 2
homepage:       https://github.com/clovyr/string-fromto
bug-reports:    https://github.com/clovyr/string-fromto/issues
author:         Patrick Nielsen
maintainer:     patrick@clovyr.io
copyright:      2018-2019 Clovyr LLC
license:        BSD3
license-file:   LICENSE
build-type:     Simple
category:       Text, Conversion
synopsis:       Conversions between common string types, as well as Base16/Base32/Base64.
description:
    Have you ever found yourself frustrated that you're spending 15-30% of your
    time in Haskell converting between string types, remembering which module has
    the `toStrict` function, importing Data.Text.Encoding and
    Data.Text.Lazy.Encoding qualified, spending time thinking about how to do
    Base64 encoding, etc.? Or tried to use one of the (excellent) typeclass-based
    string conversion libraries, only to find yourself adding awkward type
    signatures to avoid type-inferencing ambiguities?
    .
    This package exports a collection of functions that follow a simple pattern:
    .
    @stringTypeAToStringTypeB :: a -> b@
    .
    This way, if you import @Data.String.FromTo@ unqualified, or as part of
    your Prelude, all you have to think about is which type you want to convert
    into which other type.
    .
    For convenience, this package also exposes conversions between Base16, Base32,
    and Base64-encoded strings.

extra-source-files:
    README.md
    CHANGELOG.md

source-repository head
  type: git
  location: https://github.com/clovyr/string-fromto

library
  hs-source-dirs: src
  exposed-modules:
      Data.String.FromTo
  build-depends:
      base >= 4.8.2.0 && < 5
    , bytestring >= 0.10.4.0 && < 0.11
    , memory >= 0.8 && < 0.18
    , text >=0.1 && <2.1
  ghc-options:
      -Wall
  default-language: Haskell2010
