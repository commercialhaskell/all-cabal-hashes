name: aeson-value-parser
version: 0.19.3
synopsis: API for parsing "aeson" JSON tree into Haskell types
description:
  A flexible parser DSL of JSON AST produced by the \"aeson\" library
  with automated and highly detailed error reporting.
  Provides a featureful toolkit for parsing real-world documents with schemas
  of any complexity or ambiguity, which the "FromJSON" instances
  are simply not fit for.
category: Data, JSON, Parsing
homepage: https://github.com/sannsyn/aeson-value-parser
bug-reports: https://github.com/sannsyn/aeson-value-parser/issues
author: Nikita Volkov <nikita.y.volkov@mail.ru>
maintainer: Nikita Volkov <nikita.y.volkov@mail.ru>
copyright: (c) 2015, Sannsyn AS
license: MIT
license-file: LICENSE
build-type: Simple
cabal-version: >=1.10

source-repository head
  type: git
  location: git://github.com/sannsyn/aeson-value-parser.git

library
  hs-source-dirs: library
  default-extensions: Arrows, BangPatterns, ConstraintKinds, DataKinds, DefaultSignatures, DeriveDataTypeable, DeriveFoldable, DeriveFunctor, DeriveGeneric, DeriveTraversable, EmptyDataDecls, FlexibleContexts, FlexibleInstances, FunctionalDependencies, GADTs, GeneralizedNewtypeDeriving, LambdaCase, LiberalTypeSynonyms, MagicHash, MultiParamTypeClasses, MultiWayIf, NoImplicitPrelude, NoMonomorphismRestriction, OverloadedStrings, PatternGuards, PatternSynonyms, ParallelListComp, QuasiQuotes, RankNTypes, RecordWildCards, ScopedTypeVariables, StandaloneDeriving, TemplateHaskell, TupleSections, TypeFamilies, TypeOperators, UnboxedTuples
  default-language: Haskell2010
  exposed-modules:
    AesonValueParser
  other-modules:
    AesonValueParser.Error
    AesonValueParser.Prelude
    AesonValueParser.Vector
  build-depends:
    aeson ==1.*,
    attoparsec >=0.13 && <0.14,
    base >=4.12 && <5,
    bytestring >=0.10 && <0.12,
    hashable >=1.3 && <2,
    megaparsec >=8 && <10,
    mtl >=2.2 && <3,
    scientific ==0.3.*,
    text ==1.*,
    text-builder >=0.6.6.1 && <0.7,
    transformers >=0.5 && <0.7,
    unordered-containers ==0.2.*,
    vector >=0.10 && <0.13
