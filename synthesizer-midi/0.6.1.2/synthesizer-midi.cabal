Name:           synthesizer-midi
Version:        0.6.1.2
License:        GPL
License-File:   LICENSE
Author:         Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:     Henning Thielemann <haskell@henning-thielemann.de>
Homepage:       http://www.haskell.org/haskellwiki/Synthesizer
Category:       Sound, Music
Synopsis:       Render audio signals from MIDI files or realtime messages
Description:
  This package allows to read MIDI events
  and to convert them to audio and control signals.
  Included is a basic synthesizer that renders MIDI to WAV
  (or other audio signal formats supported by SoX).
Stability:      Experimental
Tested-With:    GHC==6.12.3
Tested-With:    GHC==7.2.1
Cabal-Version:  1.14
Build-Type:     Simple

Source-Repository this
  Tag:         0.6.1.2
  Type:        darcs
  Location:    http://code.haskell.org/synthesizer/midi/

Source-Repository head
  Type:        darcs
  Location:    http://code.haskell.org/synthesizer/midi/

Flag splitBase
  description: Choose the new smaller, split-up base package.

Flag buildExamples
  description: Build example executables
  default:     False

Library
  Build-Depends:
    synthesizer-dimensional >=0.7 && <0.9,
    synthesizer-core >=0.6 && <0.9,
    sox >=0.2.1 && <0.3,
    midi >=0.2.1 && <0.3,
    storable-record >=0.0.2 && <0.1,
    storablevector >=0.2.5 && <0.3,
    deepseq >=1.1 && <1.5,
    numeric-prelude >=0.3 && <0.5,
    non-negative >=0.1 && <0.2,
    event-list >=0.1.2 && <0.2,
    data-accessor-transformers >=0.2.1 && <0.3,
    data-accessor >=0.2.1 && <0.3,
    containers >=0.1 && <0.7,
    array >=0.1 && <0.6,
    transformers >=0.2 && <0.7,
    semigroups >=0.1 && <1.0,
    utility-ht >=0.0.1 && <0.1

  If flag(splitBase)
    Build-Depends:
      base >= 3 && <5
  Else
    Build-Depends:
      base >= 1.0 && < 2

  If impl(ghc>=7.0)
    GHC-Options: -fwarn-unused-do-bind
    CPP-Options: -DNoImplicitPrelude=RebindableSyntax
    Default-Extensions: CPP

  Default-Language: Haskell2010
  GHC-Options:    -Wall
  Hs-source-dirs: src
  Exposed-modules:
    Synthesizer.MIDI.EventList
    Synthesizer.MIDI.Generic
    Synthesizer.MIDI.Storable
    Synthesizer.MIDI.CausalIO.ControllerSelection
    Synthesizer.MIDI.CausalIO.ControllerSet
    Synthesizer.MIDI.CausalIO.Process
    Synthesizer.MIDI.PiecewiseConstant
    Synthesizer.MIDI.PiecewiseConstant.ControllerSet
    Synthesizer.MIDI.Dimensional
    Synthesizer.MIDI.Example.Instrument
    Synthesizer.MIDI.Dimensional.Example.Instrument
    -- these modules could be as well located in the midi package,
    -- but they are based on NumericPrelude
    Synthesizer.MIDI.Value.BendWheelPressure
    Synthesizer.MIDI.Value.BendModulation
    Synthesizer.MIDI.Value
    Synthesizer.MIDI.Dimensional.Value
    Synthesizer.MIDI.Dimensional.ValuePlain

Executable render-midi
  If flag(buildExamples)
    Build-Depends:
      synthesizer-midi,
      synthesizer-core,
      sox,
      storablevector,
      numeric-prelude,
      midi,
      event-list,
      non-negative,
      transformers,
      base
  Else
    Buildable: False
  Default-Language: Haskell2010
  GHC-Options: -Wall
  If impl(ghc>=7.0)
    GHC-Options: -fwarn-unused-do-bind
    CPP-Options: -DNoImplicitPrelude=RebindableSyntax
    Default-Extensions: CPP
  Main-Is: src/Render.hs

Test-Suite test
  Type: exitcode-stdio-1.0
  Build-Depends:
    synthesizer-midi,
    synthesizer-core,
    storablevector,
    numeric-prelude,
    midi,
    event-list,
    transformers,
    base
  Default-Language: Haskell2010
  GHC-Options: -Wall
  If impl(ghc>=7.0)
    GHC-Options: -fwarn-unused-do-bind -rtsopts
    CPP-Options: -DNoImplicitPrelude=RebindableSyntax
    Default-Extensions: CPP
  Main-Is: src/Test.hs
