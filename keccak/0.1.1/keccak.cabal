name:                keccak
version:             0.1.1
synopsis:            haskell keccak functions
description:         pure haskell implementation of keccak hash functions for
                     use with ghc or ghcjs
homepage:            https://github.com/aupiff/keccak#readme
license:             MIT
license-file:        LICENSE
author:              Roy Blankman
maintainer:          riblankman@gmail.com
copyright:           2018 Roy Blankman
category:            Crypto
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  exposed-modules:     Crypto.Hash.Keccak
  build-depends:       base >= 4.7 && < 5
                     , bytestring
  default-language:    Haskell2010

test-suite keccak-test
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             Spec.hs
  other-modules:       Test.Cryptonite
                       Test.Parse.KAT
  build-depends:       base
                     , bytestring
                     , base16-bytestring
                     , cryptonite
                     , keccak
                     , HUnit
                     , memory
                     , parsec
                     , QuickCheck
                     , quickcheck-instances
                     , test-framework
                     , test-framework-hunit
                     , test-framework-quickcheck2
                     , text
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  default-language:    Haskell2010

benchmark self
  type:                 exitcode-stdio-1.0
  hs-source-dirs:       benchs
                      , test
  other-modules:        Test.Cryptonite
  default-language:     Haskell2010
  main-is:              Main.hs
  build-depends:        base
                      , bytestring
                      , cryptonite
                      , gauge
                      , keccak
                      , memory

source-repository head
  type:     git
  location: https://github.com/aupiff/keccak
