cabal-version: >= 1.10

-- This file has been generated from package.yaml by hpack version 0.31.1.
--
-- see: https://github.com/sol/hpack
--
-- hash: 79cd47bc31fb343c075854b35187f50f082ad4bc23f5bc14a9e514cc8633c9f2

name:           aeson-schemas
version:        1.1.0
x-revision: 3
synopsis:       Easily consume JSON data on-demand with type-safety
description:    Parse JSON data easily and safely without defining new data types. Useful
                for deeply nested JSON data, which is difficult to parse using the default
                FromJSON instances.
category:       JSON
homepage:       https://github.com/LeapYear/aeson-schemas#readme
bug-reports:    https://github.com/LeapYear/aeson-schemas/issues
author:         Brandon Chinn <brandon@leapyear.io>
maintainer:     Brandon Chinn <brandon@leapyear.io>
license:        BSD3
license-file:   LICENSE
build-type:     Simple
extra-source-files:
    README.md
    CHANGELOG.md
    test/all_types.json
    test/nested.json
    test/goldens/bool.golden
    test/goldens/bool_int_double.golden
    test/goldens/double.golden
    test/goldens/enum.golden
    test/goldens/from_object_all_types.golden
    test/goldens/from_object_namespaced.golden
    test/goldens/from_object_nested.golden
    test/goldens/get_empty.golden
    test/goldens/get_just_start.golden
    test/goldens/get_ops_after_list.golden
    test/goldens/get_ops_after_tuple.golden
    test/goldens/getter_all_types_list.golden
    test/goldens/getter_all_types_list_item.golden
    test/goldens/int.golden
    test/goldens/int_int2.golden
    test/goldens/lambda_bool.golden
    test/goldens/list.golden
    test/goldens/list_explicit.golden
    test/goldens/list_maybeBool.golden
    test/goldens/list_maybeInt.golden
    test/goldens/list_type.golden
    test/goldens/maybeList.golden
    test/goldens/maybeList_bang.golden
    test/goldens/maybeList_bang_list.golden
    test/goldens/maybeList_bang_list_text.golden
    test/goldens/maybeList_list.golden
    test/goldens/maybeList_list_text.golden
    test/goldens/maybeListNull.golden
    test/goldens/maybeListNull_bang.golden
    test/goldens/maybeListNull_list.golden
    test/goldens/maybeListNull_list_text.golden
    test/goldens/maybeObj.golden
    test/goldens/maybeObj_bang.golden
    test/goldens/maybeObj_bang_text.golden
    test/goldens/maybeObj_text.golden
    test/goldens/maybeObjNull.golden
    test/goldens/maybeObjNull_text.golden
    test/goldens/nonexistent.golden
    test/goldens/README_Quickstart.golden
    test/goldens/scalar.golden
    test/goldens/schema_def_bool.golden
    test/goldens/schema_def_custom.golden
    test/goldens/schema_def_double.golden
    test/goldens/schema_def_duplicate.golden
    test/goldens/schema_def_duplicate_extend.golden
    test/goldens/schema_def_extend.golden
    test/goldens/schema_def_import_user.golden
    test/goldens/schema_def_int.golden
    test/goldens/schema_def_invalid_extend.golden
    test/goldens/schema_def_list.golden
    test/goldens/schema_def_list_obj.golden
    test/goldens/schema_def_maybe.golden
    test/goldens/schema_def_maybe_obj.golden
    test/goldens/schema_def_not_object.golden
    test/goldens/schema_def_obj.golden
    test/goldens/schema_def_shadow.golden
    test/goldens/schema_def_text.golden
    test/goldens/schema_def_union.golden
    test/goldens/schema_def_union_grouped.golden
    test/goldens/schema_def_unknown_type.golden
    test/goldens/text.golden
    test/goldens/union.golden
    test/goldens/union_0.golden
    test/goldens/union_0_a.golden
    test/goldens/union_1.golden
    test/goldens/union_2.golden
    test/goldens/unwrap_schema.golden
    test/goldens/unwrap_schema_bad_bang.golden
    test/goldens/unwrap_schema_bad_branch.golden
    test/goldens/unwrap_schema_bad_key.golden
    test/goldens/unwrap_schema_bad_list.golden
    test/goldens/unwrap_schema_bad_question.golden
    test/goldens/unwrap_schema_branch_out_of_bounds.golden
    test/goldens/unwrap_schema_nested_list.golden
    test/goldens/unwrap_schema_nested_object.golden

source-repository head
  type: git
  location: https://github.com/LeapYear/aeson-schemas

library
  exposed-modules:
      Data.Aeson.Schema
      Data.Aeson.Schema.Internal
      Data.Aeson.Schema.Show
      Data.Aeson.Schema.TH
      Data.Aeson.Schema.Utils.Sum
      Data.Aeson.Schema.Utils.TypeFamilies
  other-modules:
      Data.Aeson.Schema.TH.Enum
      Data.Aeson.Schema.TH.Get
      Data.Aeson.Schema.TH.Getter
      Data.Aeson.Schema.TH.Parse
      Data.Aeson.Schema.TH.Schema
      Data.Aeson.Schema.TH.Unwrap
      Data.Aeson.Schema.TH.Utils
  hs-source-dirs:
      src
  ghc-options: -Wall
  build-depends:
      aeson >=1.1.2.0 && <1.6
    , base >=4.9 && <5
    , bytestring >=0.10.8.1 && <0.11
    , first-class-families >=0.3.0.0 && <0.9
    , megaparsec >=6.0.0 && <9
    , template-haskell >=2.12.0.0 && <2.17
    , text >=1.2.2.2 && <1.3
    , unordered-containers >=0.2.8.0 && <0.3
  if impl(ghc >= 8.0)
    ghc-options: -Wcompat -Wincomplete-record-updates -Wincomplete-uni-patterns -Wnoncanonical-monad-instances
  if impl(ghc < 8.8)
    ghc-options: -Wnoncanonical-monadfail-instances
  default-language: Haskell2010

test-suite aeson-schemas-test
  type: exitcode-stdio-1.0
  main-is: Main.hs
  other-modules:
      AllTypes
      Enums
      Nested
      Schema
      SumType
      Util
      Paths_aeson_schemas
  hs-source-dirs:
      test
  ghc-options: -Wall
  build-depends:
      QuickCheck >=2.7 && <3
    , aeson >=1.1.2.0 && <1.6
    , aeson-schemas
    , base >=4.9 && <5
    , bytestring >=0.10.8.1 && <0.11
    , first-class-families >=0.3.0.0 && <0.9
    , megaparsec >=6.0.0 && <9
    , raw-strings-qq >=1.1 && <1.2
    , tasty >=0.11.3 && <1.4
    , tasty-golden >=2.3.1.2 && <2.4
    , tasty-hunit >=0.9 && <0.11
    , tasty-quickcheck >=0.9 && <0.11
    , template-haskell >=2.12.0.0 && <2.17
    , text >=1.2.2.2 && <1.3
    , th-test-utils >=1.0.0 && <1.1
    , unordered-containers >=0.2.8.0 && <0.3
  if impl(ghc >= 8.0)
    ghc-options: -Wcompat -Wincomplete-record-updates -Wincomplete-uni-patterns -Wnoncanonical-monad-instances
  if impl(ghc < 8.8)
    ghc-options: -Wnoncanonical-monadfail-instances
  default-language: Haskell2010
