name: char-qq
version: 0.1.1.1
category: QuasiQuotes
synopsis: Quasiquoters for characters and codepoints
description:
  A set of quasiquoters providing compile-time conversions between characters and codepoints.
  .
  Solves such problems as when you'd rather refer to a codepoint by a char,
  but don't want to waste your runtime computation cycles on the "ord" operation.
homepage: https://github.com/metrix-ai/char-qq
bug-reports: https://github.com/metrix-ai/char-qq/issues
author: Nikita Volkov <nikita.y.volkov@mail.ru>
maintainer: Metrix.AI Tech Team <tech@metrix.ai>
copyright: (c) 2019 Metrix.AI
license: MIT
license-file: LICENSE
build-type: Simple
cabal-version: >=1.10

source-repository head
  type: git
  location: git://github.com/metrix-ai/char-qq.git

library
  hs-source-dirs: library
  default-extensions: Arrows, BangPatterns, ConstraintKinds, DataKinds, DefaultSignatures, DeriveDataTypeable, DeriveFoldable, DeriveFunctor, DeriveGeneric, DeriveTraversable, EmptyDataDecls, FlexibleContexts, FlexibleInstances, FunctionalDependencies, GADTs, GeneralizedNewtypeDeriving, LambdaCase, LiberalTypeSynonyms, MagicHash, MultiParamTypeClasses, MultiWayIf, NoImplicitPrelude, NoMonomorphismRestriction, OverloadedStrings, PatternGuards, PatternSynonyms, ParallelListComp, QuasiQuotes, RankNTypes, RecordWildCards, ScopedTypeVariables, StandaloneDeriving, TemplateHaskell, TupleSections, TypeApplications, TypeFamilies, TypeOperators, UnboxedTuples
  default-language: Haskell2010
  exposed-modules:
    CharQq
  other-modules:
    CharQq.Exp
    CharQq.Pat
    CharQq.Prelude
    CharQq.Q
  build-depends:
    base >=4.9 && <5,
    template-haskell >=2.9 && <3
