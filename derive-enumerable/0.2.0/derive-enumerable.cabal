name:                derive-enumerable
version:             0.2.0
synopsis:            Generic instances for enumerating complex data types
description:
    Generalized equivalent to doing `[minBound..maxBound]` but on complex types.
    .
    > λ :m +Data.Enumerable.Generic
    > λ :set -XDeriveGeneric
    > λ data Flag = Flag Bool Word8 deriving (Show, Generic)
    > λ instance Enumerable Flag
    > λ instance Default Flag where def = Flag False 0
    > λ allEnum :: [Flag]
    > [Flag False 0,Flag True 0,Flag False 1, (..snip..) Flag False 255,Flag True 255]
license:             GPL-3
license-file:        LICENSE
author:              Evan Cofsky <evan@theunixman.com>
maintainer:          Evan Cofsky <evan@theunixman.com>
copyright:           (c) 2015-2023 Maciej Goszczycki, Evan Cofsky
category:            Data, Generics
build-type:          Simple
extra-source-files:  README.md
stability:           experimental
cabal-version:       >=1.10
homepage:            https://github.com/theunixman/derive-enumerable
bug-reports:         https://github.com/theunixman/derive-enumerable

library
    exposed-modules:   Data.Enumerable.Generic
    other-extensions:  DefaultSignatures,
                       TypeOperators,
                       FlexibleContexts
    build-depends:     base >=4.7 && <4.8,
                       data-default >=0.5.0
    hs-source-dirs:    src
    default-language:  Haskell2010
    ghc-options:       -Wall -fno-warn-orphans

source-repository head
    type:      git
    location:  git@github.com:theunixman/derive-enumerable.git
