Cabal-Version: 3.0
Name:        list-tries
Version:     0.6.7.1
Homepage:    http://iki.fi/matti.niemenmaa/list-tries/
Synopsis:    Tries and Patricia tries: finite sets and maps for list keys
Category:    Data, Data Structures
Stability:   provisional
Description:
   This library provides implementations of finite sets and maps for list keys
   using tries, both simple and of the Patricia kind. In most (or all? sorry,
   haven't benchmarked yet) cases, the Patricia tries will have better
   performance, so use them unless you have reasons not to.
   .
   The data types are parametrized over the map type they use internally to
   store the child nodes: this allows extending them to support different kinds
   of key types or increasing efficiency. Child maps are required to be
   instances of the Map class in Data.ListTrie.Base.Map. Some operations
   additionally require an OrdMap instance.
   .
   The Eq, Ord, and Enum modules contain ready structures for key types which
   are instances of those classes, using lists of pairs, Data.Map, and
   Data.IntMap respectively.

Author:       Matti Niemenmaa
Maintainer:   Andrzej Rybczak <andrzej@rybczak.net>
License:      BSD-3-Clause
License-File: LICENSE.txt
Tested-With:  GHC == { 8.10.7, 9.0.2, 9.2.8, 9.4.8, 9.6.5, 9.8.2, 9.10.1 }

Extra-Source-Files: README.md
                    CHANGELOG.md
                    CREDITS.txt
                    headers/*.h
                    tests/README.txt
                    tests/*.hs
                    tests/Tests/*.hs

source-repository head
  type: git
  location: https://github.com/arybczak/list-tries

Library
   Build-Depends: base       >= 4.14 && < 5
                , binary     >= 0.5  && < 0.11
                , containers >= 0.4  && < 0.8
                , dlist      >= 0.4  && < 1.1

   ghc-options: -Wall -Wextra -Wno-dodgy-imports

   Exposed-Modules: Data.ListTrie.Base.Map
                    Data.ListTrie.Map
                    Data.ListTrie.Map.Eq
                    Data.ListTrie.Map.Ord
                    Data.ListTrie.Map.Enum
                    Data.ListTrie.Set
                    Data.ListTrie.Set.Eq
                    Data.ListTrie.Set.Ord
                    Data.ListTrie.Set.Enum
                    Data.ListTrie.Patricia.Map
                    Data.ListTrie.Patricia.Map.Eq
                    Data.ListTrie.Patricia.Map.Ord
                    Data.ListTrie.Patricia.Map.Enum
                    Data.ListTrie.Patricia.Set
                    Data.ListTrie.Patricia.Set.Eq
                    Data.ListTrie.Patricia.Set.Ord
                    Data.ListTrie.Patricia.Set.Enum
   Other-Modules:   Data.ListTrie.Base
                    Data.ListTrie.Base.Classes
                    Data.ListTrie.Base.Map.Internal
                    Data.ListTrie.Patricia.Base
                    Data.ListTrie.Util

   Include-Dirs: headers

   Default-language: Haskell2010

   Other-Extensions: CPP
                     FlexibleContexts
                     FlexibleInstances
                     FunctionalDependencies
                     MultiParamTypeClasses
                     Rank2Types
                     ScopedTypeVariables
                     UndecidableInstances

Test-Suite list-tries-tests
   type: exitcode-stdio-1.0

   hs-source-dirs: tests
   main-is: Main.hs

   if impl(ghc >= 9.8)
     ghc-options: -Wno-x-partial

   Build-Depends: list-tries
                , base               < 5
                , binary
                , template-haskell   >= 2.16 && < 2.23
                , HUnit
                , QuickCheck
                , test-framework
                , test-framework-hunit
                , test-framework-quickcheck2
                , ChasingBottoms

   Other-Modules: Tests.Base
                  Tests.Cases
                  Tests.Properties
                  Tests.Strictness
                  Tests.TH

   Default-language: Haskell2010

   Other-Extensions: CPP
                     EmptyDataDecls
                     FlexibleContexts
                     FlexibleInstances
                     FunctionalDependencies
                     MultiParamTypeClasses
                     NoMonomorphismRestriction
                     PatternGuards
                     TemplateHaskell
