Cabal-Version:      2.2
Name:               dfinity-radix-tree
Version:            0.6.3
Synopsis:           A generic data integrity layer.
Description:
   This library allows you to construct a Merkle tree on top of any underlying
   key–value database. It works by organizing your key–value pairs into a binary
   radix tree, which is well suited for storing large dictionaries of fairly
   random keys, and is optimized for storing keys of the same length.

License:            BSD-3-Clause
License-File:       LICENSE
Category:           Blockchain, DFINITY, Database
Copyright:          2018-2019 DFINITY Stiftung
Stability:          Stable
Author:             Enzo Haussecker <enzo@dfinity.org>, Remy Goldschmidt <remy@dfinity.org>, Armando Ramirez <armando@dfinity.org>
Maintainer:         Enzo Haussecker <enzo@dfinity.org>, Remy Goldschmidt <remy@dfinity.org>, Armando Ramirez <armando@dfinity.org>
Homepage:           https://dfinity.org
Tested-With:        GHC==8.4.3, GHC==8.2.2
Build-Type:         Simple
Extra-Source-Files: .travis.yml CHANGELOG.md, README.md

Common generic
  Build-Depends:
    base >=4.10 && <5
  Default-Language:
    Haskell2010
  GHC-Options:
    -Wall
    -Wredundant-constraints

Library
  Import:
    generic
  Build-Depends:
    BoundedChan,
    base16-bytestring,
    bytestring,
    concurrent-extra,
    conduit,
    containers,
    cryptonite,
    data-default-class,
    deepseq,
    directory,
    dlist,
    hashtables,
    lens-simple,
    leveldb-haskell,
    lrucaching,
    memory,
    mtl,
    reducers,
    resourcet,
    serialise,
    temporary,
    transformers
  Exposed-Modules:
    DFINITY.RadixTree
    DFINITY.RadixTree.Conduit
  Extra-Libraries:
    leveldb
  HS-Source-Dirs:
    src
  Other-Modules:
    DFINITY.RadixTree.Bits
    DFINITY.RadixTree.Hash
    DFINITY.RadixTree.Lenses
    DFINITY.RadixTree.Lock
    DFINITY.RadixTree.Memory
    DFINITY.RadixTree.Serialise
    DFINITY.RadixTree.Types
    DFINITY.RadixTree.Utilities

Executable dfinity-radix-tree-example
  Import:
    generic
  Build-Depends:
    base16-bytestring,
    bytestring,
    containers,
    dfinity-radix-tree
  HS-Source-Dirs:
    example
  Main-Is:
    Main.hs

Test-Suite dfinity-radix-tree-tests
  Import:
    generic
  Build-Depends:
    BoundedChan,
    QuickCheck,
    aeson,
    base16-bytestring,
    bytestring,
    clock,
    concurrent-extra,
    conduit,
    containers,
    cryptonite,
    dfinity-radix-tree,
    filepath,
    leveldb-haskell,
    memory,
    mtl,
    resourcet,
    tasty,
    tasty-hunit,
    tasty-quickcheck,
    temporary,
    text,
    transformers,
    unordered-containers
  HS-Source-Dirs:
    test
  Main-Is:
    Tests.hs
  Other-Modules:
    Integrations,
    Properties,
    Types,
    Units
  Type:
    exitcode-stdio-1.0
